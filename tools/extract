#!/usr/bin/env -S uv run
import pickle
from pathlib import Path
from datetime import datetime
import time
import typer
from loguru import logger
from typing_extensions import Annotated

from apt.ingest import load_pdfs, chunk_documents
from apt.config import Config

app = typer.Typer()

def setup_logging():
    logger.remove()
    logger.add(
        sys.stderr,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO"
    )
    log_dir = Config.DATA_DIR / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)
    logger.add(
        log_dir / f"extraction_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log",
        format="{time:YYYY-MM-DD HH:mm:SS} | {level: <8} | {message}",
        level="DEBUG"
    )

@app.command()
def main(
    max_files: Annotated[int, typer.Option(help="Maximum number of PDF files to process")] = None,
    output: Annotated[Path, typer.Option(help="Output file path")] = None,
):
    setup_logging()
    start_time = time.time()

    logger.info("PDF Extraction and Chunking Pipeline")
    logger.info(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    if output is None:
        output = Config.PROCESSED_DATA / "chunked_documents.pkl"

    output.parent.mkdir(parents=True, exist_ok=True)

    logger.info("STEP 1/3: Loading PDFs")
    pdf_load_start = time.time()
    documents = load_pdfs(max_files=max_files)
    pdf_load_time = time.time() - pdf_load_start

    if not documents:
        logger.error("No documents loaded")
        raise typer.Exit(code=1)

    logger.success(f"Loaded {len(documents)} pages in {pdf_load_time:.2f}s")

    logger.info("STEP 2/3: Chunking documents")
    chunk_start = time.time()
    chunks = chunk_documents(documents)
    chunk_time = time.time() - chunk_start

    logger.success(f"Created {len(chunks)} chunks in {chunk_time:.2f}s")

    logger.info("STEP 3/3: Saving chunks")
    save_start = time.time()
    with open(output, 'wb') as f:
        pickle.dump(chunks, f, protocol=pickle.HIGHEST_PROTOCOL)
    save_time = time.time() - save_start

    file_size_mb = output.stat().st_size / (1024 * 1024)
    logger.success(f"Saved to {output} ({file_size_mb:.1f} MB)")

    total_time = time.time() - start_time

    logger.info("Statistics:")
    logger.info(f"  Total Pages:  {len(documents):,}")
    logger.info(f"  Total Chunks: {len(chunks):,}")
    logger.info(f"  Output:       {output}")
    logger.info(f"  Size:         {file_size_mb:.1f} MB")
    logger.info(f"  Total Time:   {total_time/60:.1f} minutes")

    logger.success("Extraction complete")

if __name__ == "__main__":
    app()
